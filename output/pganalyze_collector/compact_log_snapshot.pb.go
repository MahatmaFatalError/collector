// Code generated by protoc-gen-go. DO NOT EDIT.
// source: compact_log_snapshot.proto

package pganalyze_collector

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LogLineInformation_LogLevel int32

const (
	LogLineInformation_UNKNOWN LogLineInformation_LogLevel = 0
	// Postgres log levels https://www.postgresql.org/docs/9.6/static/runtime-config-logging.html#RUNTIME-CONFIG-SEVERITY-LEVELS
	LogLineInformation_DEBUG   LogLineInformation_LogLevel = 1
	LogLineInformation_INFO    LogLineInformation_LogLevel = 2
	LogLineInformation_NOTICE  LogLineInformation_LogLevel = 3
	LogLineInformation_WARNING LogLineInformation_LogLevel = 4
	LogLineInformation_ERROR   LogLineInformation_LogLevel = 5
	LogLineInformation_LOG     LogLineInformation_LogLevel = 6
	LogLineInformation_FATAL   LogLineInformation_LogLevel = 7
	LogLineInformation_PANIC   LogLineInformation_LogLevel = 8
	// These levels are typically only used in additional lines for context
	LogLineInformation_DETAIL    LogLineInformation_LogLevel = 9
	LogLineInformation_HINT      LogLineInformation_LogLevel = 10
	LogLineInformation_CONTEXT   LogLineInformation_LogLevel = 11
	LogLineInformation_STATEMENT LogLineInformation_LogLevel = 12
	LogLineInformation_QUERY     LogLineInformation_LogLevel = 13
)

var LogLineInformation_LogLevel_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "DEBUG",
	2:  "INFO",
	3:  "NOTICE",
	4:  "WARNING",
	5:  "ERROR",
	6:  "LOG",
	7:  "FATAL",
	8:  "PANIC",
	9:  "DETAIL",
	10: "HINT",
	11: "CONTEXT",
	12: "STATEMENT",
	13: "QUERY",
}
var LogLineInformation_LogLevel_value = map[string]int32{
	"UNKNOWN":   0,
	"DEBUG":     1,
	"INFO":      2,
	"NOTICE":    3,
	"WARNING":   4,
	"ERROR":     5,
	"LOG":       6,
	"FATAL":     7,
	"PANIC":     8,
	"DETAIL":    9,
	"HINT":      10,
	"CONTEXT":   11,
	"STATEMENT": 12,
	"QUERY":     13,
}

func (x LogLineInformation_LogLevel) String() string {
	return proto.EnumName(LogLineInformation_LogLevel_name, int32(x))
}
func (LogLineInformation_LogLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_compact_log_snapshot_e4711e0aef4ee307, []int{2, 0}
}

type LogLineInformation_LogClassification int32

const (
	LogLineInformation_UNKNOWN_LOG_CLASSIFICATION LogLineInformation_LogClassification = 0
	// Server events
	LogLineInformation_SERVER_CRASHED           LogLineInformation_LogClassification = 1
	LogLineInformation_SERVER_START             LogLineInformation_LogClassification = 2
	LogLineInformation_SERVER_START_RECOVERING  LogLineInformation_LogClassification = 3
	LogLineInformation_SERVER_SHUTDOWN          LogLineInformation_LogClassification = 4
	LogLineInformation_SERVER_OUT_OF_MEMORY     LogLineInformation_LogClassification = 5
	LogLineInformation_SERVER_INVALID_CHECKSUM  LogLineInformation_LogClassification = 6
	LogLineInformation_SERVER_TEMP_FILE_CREATED LogLineInformation_LogClassification = 7
	LogLineInformation_SERVER_MISC              LogLineInformation_LogClassification = 8
	LogLineInformation_SERVER_RELOAD            LogLineInformation_LogClassification = 9
	LogLineInformation_SERVER_PROCESS_EXITED    LogLineInformation_LogClassification = 10
	// Connection-related
	LogLineInformation_CONNECTION_RECEIVED                 LogLineInformation_LogClassification = 20
	LogLineInformation_CONNECTION_AUTHORIZED               LogLineInformation_LogClassification = 21
	LogLineInformation_CONNECTION_REJECTED                 LogLineInformation_LogClassification = 22
	LogLineInformation_CONNECTION_DISCONNECTED             LogLineInformation_LogClassification = 23
	LogLineInformation_CONNECTION_CLIENT_FAILED_TO_CONNECT LogLineInformation_LogClassification = 24
	LogLineInformation_CONNECTION_LOST                     LogLineInformation_LogClassification = 25
	LogLineInformation_CONNECTION_LOST_OPEN_TX             LogLineInformation_LogClassification = 26
	LogLineInformation_CONNECTION_TERMINATED               LogLineInformation_LogClassification = 27
	LogLineInformation_OUT_OF_CONNECTIONS                  LogLineInformation_LogClassification = 28
	LogLineInformation_TOO_MANY_CONNECTIONS_ROLE           LogLineInformation_LogClassification = 29
	LogLineInformation_COULD_NOT_ACCEPT_SSL_CONNECTION     LogLineInformation_LogClassification = 30
	LogLineInformation_PROTOCOL_ERROR_UNSUPPORTED_VERSION  LogLineInformation_LogClassification = 31
	LogLineInformation_PROTOCOL_ERROR_INCOMPLETE_MESSAGE   LogLineInformation_LogClassification = 32
	LogLineInformation_TOO_MANY_CONNECTIONS_DATABASE       LogLineInformation_LogClassification = 33
	// Checkpointer related
	LogLineInformation_CHECKPOINT_STARTING     LogLineInformation_LogClassification = 40
	LogLineInformation_CHECKPOINT_COMPLETE     LogLineInformation_LogClassification = 41
	LogLineInformation_CHECKPOINT_TOO_FREQUENT LogLineInformation_LogClassification = 42
	LogLineInformation_RESTARTPOINT_STARTING   LogLineInformation_LogClassification = 43
	LogLineInformation_RESTARTPOINT_COMPLETE   LogLineInformation_LogClassification = 44
	LogLineInformation_RESTARTPOINT_AT         LogLineInformation_LogClassification = 45
	// WAL/Archiving
	LogLineInformation_WAL_INVALID_RECORD_LENGTH  LogLineInformation_LogClassification = 50
	LogLineInformation_WAL_REDO                   LogLineInformation_LogClassification = 51
	LogLineInformation_WAL_ARCHIVE_COMMAND_FAILED LogLineInformation_LogClassification = 52
	// Autovacuum
	LogLineInformation_AUTOVACUUM_CANCEL                   LogLineInformation_LogClassification = 60
	LogLineInformation_TXID_WRAPAROUND_WARNING             LogLineInformation_LogClassification = 61
	LogLineInformation_TXID_WRAPAROUND_ERROR               LogLineInformation_LogClassification = 62
	LogLineInformation_AUTOVACUUM_LAUNCHER_STARTED         LogLineInformation_LogClassification = 63
	LogLineInformation_AUTOVACUUM_LAUNCHER_SHUTTING_DOWN   LogLineInformation_LogClassification = 64
	LogLineInformation_AUTOVACUUM_COMPLETED                LogLineInformation_LogClassification = 65
	LogLineInformation_AUTOANALYZE_COMPLETED               LogLineInformation_LogClassification = 66
	LogLineInformation_SKIPPING_VACUUM_LOCK_NOT_AVAILABLE  LogLineInformation_LogClassification = 67
	LogLineInformation_SKIPPING_ANALYZE_LOCK_NOT_AVAILABLE LogLineInformation_LogClassification = 68
	// Locks
	LogLineInformation_LOCK_ACQUIRED          LogLineInformation_LogClassification = 70
	LogLineInformation_LOCK_WAITING           LogLineInformation_LogClassification = 71
	LogLineInformation_LOCK_TIMEOUT           LogLineInformation_LogClassification = 72
	LogLineInformation_LOCK_DEADLOCK_DETECTED LogLineInformation_LogClassification = 73
	LogLineInformation_LOCK_DEADLOCK_AVOIDED  LogLineInformation_LogClassification = 74
	// Notices about statement execution
	LogLineInformation_STATEMENT_DURATION         LogLineInformation_LogClassification = 80
	LogLineInformation_STATEMENT_CANCELED_TIMEOUT LogLineInformation_LogClassification = 81
	LogLineInformation_STATEMENT_CANCELED_USER    LogLineInformation_LogClassification = 82
	LogLineInformation_STATEMENT_LOG              LogLineInformation_LogClassification = 83
	LogLineInformation_STATEMENT_AUTO_EXPLAIN     LogLineInformation_LogClassification = 84
	// Standby
	LogLineInformation_STANDBY_RESTORED_WAL_FROM_ARCHIVE LogLineInformation_LogClassification = 90
	LogLineInformation_STANDBY_STARTED_STREAMING         LogLineInformation_LogClassification = 91
	LogLineInformation_STANDBY_STREAMING_INTERRUPTED     LogLineInformation_LogClassification = 92
	LogLineInformation_STANDBY_STOPPED_STREAMING         LogLineInformation_LogClassification = 93
	LogLineInformation_STANDBY_CONSISTENT_RECOVERY_STATE LogLineInformation_LogClassification = 94
	LogLineInformation_STANDBY_STATEMENT_CANCELED        LogLineInformation_LogClassification = 95
	LogLineInformation_STANDBY_INVALID_TIMELINE          LogLineInformation_LogClassification = 96
	// Constraint violations
	LogLineInformation_UNIQUE_CONSTRAINT_VIOLATION      LogLineInformation_LogClassification = 100
	LogLineInformation_FOREIGN_KEY_CONSTRAINT_VIOLATION LogLineInformation_LogClassification = 101
	LogLineInformation_NOT_NULL_CONSTRAINT_VIOLATION    LogLineInformation_LogClassification = 102
	LogLineInformation_CHECK_CONSTRAINT_VIOLATION       LogLineInformation_LogClassification = 103
	LogLineInformation_EXCLUSION_CONSTRAINT_VIOLATION   LogLineInformation_LogClassification = 104
	// Application errors
	LogLineInformation_SYNTAX_ERROR                        LogLineInformation_LogClassification = 110
	LogLineInformation_INVALID_INPUT_SYNTAX                LogLineInformation_LogClassification = 111
	LogLineInformation_VALUE_TOO_LONG_FOR_TYPE             LogLineInformation_LogClassification = 112
	LogLineInformation_INVALID_VALUE                       LogLineInformation_LogClassification = 113
	LogLineInformation_MALFORMED_ARRAY_LITERAL             LogLineInformation_LogClassification = 114
	LogLineInformation_SUBQUERY_MISSING_ALIAS              LogLineInformation_LogClassification = 115
	LogLineInformation_INSERT_TARGET_COLUMN_MISMATCH       LogLineInformation_LogClassification = 116
	LogLineInformation_ANY_ALL_REQUIRES_ARRAY              LogLineInformation_LogClassification = 117
	LogLineInformation_COLUMN_MISSING_FROM_GROUP_BY        LogLineInformation_LogClassification = 118
	LogLineInformation_RELATION_DOES_NOT_EXIST             LogLineInformation_LogClassification = 119
	LogLineInformation_COLUMN_DOES_NOT_EXIST               LogLineInformation_LogClassification = 120
	LogLineInformation_OPERATOR_DOES_NOT_EXIST             LogLineInformation_LogClassification = 121
	LogLineInformation_COLUMN_REFERENCE_AMBIGUOUS          LogLineInformation_LogClassification = 122
	LogLineInformation_PERMISSION_DENIED                   LogLineInformation_LogClassification = 123
	LogLineInformation_TRANSACTION_IS_ABORTED              LogLineInformation_LogClassification = 124
	LogLineInformation_ON_CONFLICT_NO_CONSTRAINT_MATCH     LogLineInformation_LogClassification = 125
	LogLineInformation_ON_CONFLICT_ROW_AFFECTED_TWICE      LogLineInformation_LogClassification = 126
	LogLineInformation_COLUMN_CANNOT_BE_CAST               LogLineInformation_LogClassification = 127
	LogLineInformation_DIVISION_BY_ZERO                    LogLineInformation_LogClassification = 128
	LogLineInformation_CANNOT_DROP                         LogLineInformation_LogClassification = 129
	LogLineInformation_INTEGER_OUT_OF_RANGE                LogLineInformation_LogClassification = 130
	LogLineInformation_INVALID_REGEXP                      LogLineInformation_LogClassification = 131
	LogLineInformation_PARAM_MISSING                       LogLineInformation_LogClassification = 132
	LogLineInformation_FUNCTION_DOES_NOT_EXIST             LogLineInformation_LogClassification = 133
	LogLineInformation_NO_SUCH_SAVEPOINT                   LogLineInformation_LogClassification = 134
	LogLineInformation_UNTERMINATED_QUOTED_STRING          LogLineInformation_LogClassification = 135
	LogLineInformation_UNTERMINATED_QUOTED_IDENTIFIER      LogLineInformation_LogClassification = 136
	LogLineInformation_INVALID_BYTE_SEQUENCE               LogLineInformation_LogClassification = 137
	LogLineInformation_COULD_NOT_SERIALIZE_REPEATABLE_READ LogLineInformation_LogClassification = 138
	LogLineInformation_COULD_NOT_SERIALIZE_SERIALIZABLE    LogLineInformation_LogClassification = 139
	// Collector internal events
	LogLineInformation_PGA_COLLECTOR_IDENTIFY LogLineInformation_LogClassification = 1000
)

var LogLineInformation_LogClassification_name = map[int32]string{
	0:    "UNKNOWN_LOG_CLASSIFICATION",
	1:    "SERVER_CRASHED",
	2:    "SERVER_START",
	3:    "SERVER_START_RECOVERING",
	4:    "SERVER_SHUTDOWN",
	5:    "SERVER_OUT_OF_MEMORY",
	6:    "SERVER_INVALID_CHECKSUM",
	7:    "SERVER_TEMP_FILE_CREATED",
	8:    "SERVER_MISC",
	9:    "SERVER_RELOAD",
	10:   "SERVER_PROCESS_EXITED",
	20:   "CONNECTION_RECEIVED",
	21:   "CONNECTION_AUTHORIZED",
	22:   "CONNECTION_REJECTED",
	23:   "CONNECTION_DISCONNECTED",
	24:   "CONNECTION_CLIENT_FAILED_TO_CONNECT",
	25:   "CONNECTION_LOST",
	26:   "CONNECTION_LOST_OPEN_TX",
	27:   "CONNECTION_TERMINATED",
	28:   "OUT_OF_CONNECTIONS",
	29:   "TOO_MANY_CONNECTIONS_ROLE",
	30:   "COULD_NOT_ACCEPT_SSL_CONNECTION",
	31:   "PROTOCOL_ERROR_UNSUPPORTED_VERSION",
	32:   "PROTOCOL_ERROR_INCOMPLETE_MESSAGE",
	33:   "TOO_MANY_CONNECTIONS_DATABASE",
	40:   "CHECKPOINT_STARTING",
	41:   "CHECKPOINT_COMPLETE",
	42:   "CHECKPOINT_TOO_FREQUENT",
	43:   "RESTARTPOINT_STARTING",
	44:   "RESTARTPOINT_COMPLETE",
	45:   "RESTARTPOINT_AT",
	50:   "WAL_INVALID_RECORD_LENGTH",
	51:   "WAL_REDO",
	52:   "WAL_ARCHIVE_COMMAND_FAILED",
	60:   "AUTOVACUUM_CANCEL",
	61:   "TXID_WRAPAROUND_WARNING",
	62:   "TXID_WRAPAROUND_ERROR",
	63:   "AUTOVACUUM_LAUNCHER_STARTED",
	64:   "AUTOVACUUM_LAUNCHER_SHUTTING_DOWN",
	65:   "AUTOVACUUM_COMPLETED",
	66:   "AUTOANALYZE_COMPLETED",
	67:   "SKIPPING_VACUUM_LOCK_NOT_AVAILABLE",
	68:   "SKIPPING_ANALYZE_LOCK_NOT_AVAILABLE",
	70:   "LOCK_ACQUIRED",
	71:   "LOCK_WAITING",
	72:   "LOCK_TIMEOUT",
	73:   "LOCK_DEADLOCK_DETECTED",
	74:   "LOCK_DEADLOCK_AVOIDED",
	80:   "STATEMENT_DURATION",
	81:   "STATEMENT_CANCELED_TIMEOUT",
	82:   "STATEMENT_CANCELED_USER",
	83:   "STATEMENT_LOG",
	84:   "STATEMENT_AUTO_EXPLAIN",
	90:   "STANDBY_RESTORED_WAL_FROM_ARCHIVE",
	91:   "STANDBY_STARTED_STREAMING",
	92:   "STANDBY_STREAMING_INTERRUPTED",
	93:   "STANDBY_STOPPED_STREAMING",
	94:   "STANDBY_CONSISTENT_RECOVERY_STATE",
	95:   "STANDBY_STATEMENT_CANCELED",
	96:   "STANDBY_INVALID_TIMELINE",
	100:  "UNIQUE_CONSTRAINT_VIOLATION",
	101:  "FOREIGN_KEY_CONSTRAINT_VIOLATION",
	102:  "NOT_NULL_CONSTRAINT_VIOLATION",
	103:  "CHECK_CONSTRAINT_VIOLATION",
	104:  "EXCLUSION_CONSTRAINT_VIOLATION",
	110:  "SYNTAX_ERROR",
	111:  "INVALID_INPUT_SYNTAX",
	112:  "VALUE_TOO_LONG_FOR_TYPE",
	113:  "INVALID_VALUE",
	114:  "MALFORMED_ARRAY_LITERAL",
	115:  "SUBQUERY_MISSING_ALIAS",
	116:  "INSERT_TARGET_COLUMN_MISMATCH",
	117:  "ANY_ALL_REQUIRES_ARRAY",
	118:  "COLUMN_MISSING_FROM_GROUP_BY",
	119:  "RELATION_DOES_NOT_EXIST",
	120:  "COLUMN_DOES_NOT_EXIST",
	121:  "OPERATOR_DOES_NOT_EXIST",
	122:  "COLUMN_REFERENCE_AMBIGUOUS",
	123:  "PERMISSION_DENIED",
	124:  "TRANSACTION_IS_ABORTED",
	125:  "ON_CONFLICT_NO_CONSTRAINT_MATCH",
	126:  "ON_CONFLICT_ROW_AFFECTED_TWICE",
	127:  "COLUMN_CANNOT_BE_CAST",
	128:  "DIVISION_BY_ZERO",
	129:  "CANNOT_DROP",
	130:  "INTEGER_OUT_OF_RANGE",
	131:  "INVALID_REGEXP",
	132:  "PARAM_MISSING",
	133:  "FUNCTION_DOES_NOT_EXIST",
	134:  "NO_SUCH_SAVEPOINT",
	135:  "UNTERMINATED_QUOTED_STRING",
	136:  "UNTERMINATED_QUOTED_IDENTIFIER",
	137:  "INVALID_BYTE_SEQUENCE",
	138:  "COULD_NOT_SERIALIZE_REPEATABLE_READ",
	139:  "COULD_NOT_SERIALIZE_SERIALIZABLE",
	1000: "PGA_COLLECTOR_IDENTIFY",
}
var LogLineInformation_LogClassification_value = map[string]int32{
	"UNKNOWN_LOG_CLASSIFICATION":          0,
	"SERVER_CRASHED":                      1,
	"SERVER_START":                        2,
	"SERVER_START_RECOVERING":             3,
	"SERVER_SHUTDOWN":                     4,
	"SERVER_OUT_OF_MEMORY":                5,
	"SERVER_INVALID_CHECKSUM":             6,
	"SERVER_TEMP_FILE_CREATED":            7,
	"SERVER_MISC":                         8,
	"SERVER_RELOAD":                       9,
	"SERVER_PROCESS_EXITED":               10,
	"CONNECTION_RECEIVED":                 20,
	"CONNECTION_AUTHORIZED":               21,
	"CONNECTION_REJECTED":                 22,
	"CONNECTION_DISCONNECTED":             23,
	"CONNECTION_CLIENT_FAILED_TO_CONNECT": 24,
	"CONNECTION_LOST":                     25,
	"CONNECTION_LOST_OPEN_TX":             26,
	"CONNECTION_TERMINATED":               27,
	"OUT_OF_CONNECTIONS":                  28,
	"TOO_MANY_CONNECTIONS_ROLE":           29,
	"COULD_NOT_ACCEPT_SSL_CONNECTION":     30,
	"PROTOCOL_ERROR_UNSUPPORTED_VERSION":  31,
	"PROTOCOL_ERROR_INCOMPLETE_MESSAGE":   32,
	"TOO_MANY_CONNECTIONS_DATABASE":       33,
	"CHECKPOINT_STARTING":                 40,
	"CHECKPOINT_COMPLETE":                 41,
	"CHECKPOINT_TOO_FREQUENT":             42,
	"RESTARTPOINT_STARTING":               43,
	"RESTARTPOINT_COMPLETE":               44,
	"RESTARTPOINT_AT":                     45,
	"WAL_INVALID_RECORD_LENGTH":           50,
	"WAL_REDO":                            51,
	"WAL_ARCHIVE_COMMAND_FAILED":          52,
	"AUTOVACUUM_CANCEL":                   60,
	"TXID_WRAPAROUND_WARNING":             61,
	"TXID_WRAPAROUND_ERROR":               62,
	"AUTOVACUUM_LAUNCHER_STARTED":         63,
	"AUTOVACUUM_LAUNCHER_SHUTTING_DOWN":   64,
	"AUTOVACUUM_COMPLETED":                65,
	"AUTOANALYZE_COMPLETED":               66,
	"SKIPPING_VACUUM_LOCK_NOT_AVAILABLE":  67,
	"SKIPPING_ANALYZE_LOCK_NOT_AVAILABLE": 68,
	"LOCK_ACQUIRED":                       70,
	"LOCK_WAITING":                        71,
	"LOCK_TIMEOUT":                        72,
	"LOCK_DEADLOCK_DETECTED":              73,
	"LOCK_DEADLOCK_AVOIDED":               74,
	"STATEMENT_DURATION":                  80,
	"STATEMENT_CANCELED_TIMEOUT":          81,
	"STATEMENT_CANCELED_USER":             82,
	"STATEMENT_LOG":                       83,
	"STATEMENT_AUTO_EXPLAIN":              84,
	"STANDBY_RESTORED_WAL_FROM_ARCHIVE":   90,
	"STANDBY_STARTED_STREAMING":           91,
	"STANDBY_STREAMING_INTERRUPTED":       92,
	"STANDBY_STOPPED_STREAMING":           93,
	"STANDBY_CONSISTENT_RECOVERY_STATE":   94,
	"STANDBY_STATEMENT_CANCELED":          95,
	"STANDBY_INVALID_TIMELINE":            96,
	"UNIQUE_CONSTRAINT_VIOLATION":         100,
	"FOREIGN_KEY_CONSTRAINT_VIOLATION":    101,
	"NOT_NULL_CONSTRAINT_VIOLATION":       102,
	"CHECK_CONSTRAINT_VIOLATION":          103,
	"EXCLUSION_CONSTRAINT_VIOLATION":      104,
	"SYNTAX_ERROR":                        110,
	"INVALID_INPUT_SYNTAX":                111,
	"VALUE_TOO_LONG_FOR_TYPE":             112,
	"INVALID_VALUE":                       113,
	"MALFORMED_ARRAY_LITERAL":             114,
	"SUBQUERY_MISSING_ALIAS":              115,
	"INSERT_TARGET_COLUMN_MISMATCH":       116,
	"ANY_ALL_REQUIRES_ARRAY":              117,
	"COLUMN_MISSING_FROM_GROUP_BY":        118,
	"RELATION_DOES_NOT_EXIST":             119,
	"COLUMN_DOES_NOT_EXIST":               120,
	"OPERATOR_DOES_NOT_EXIST":             121,
	"COLUMN_REFERENCE_AMBIGUOUS":          122,
	"PERMISSION_DENIED":                   123,
	"TRANSACTION_IS_ABORTED":              124,
	"ON_CONFLICT_NO_CONSTRAINT_MATCH":     125,
	"ON_CONFLICT_ROW_AFFECTED_TWICE":      126,
	"COLUMN_CANNOT_BE_CAST":               127,
	"DIVISION_BY_ZERO":                    128,
	"CANNOT_DROP":                         129,
	"INTEGER_OUT_OF_RANGE":                130,
	"INVALID_REGEXP":                      131,
	"PARAM_MISSING":                       132,
	"FUNCTION_DOES_NOT_EXIST":             133,
	"NO_SUCH_SAVEPOINT":                   134,
	"UNTERMINATED_QUOTED_STRING":          135,
	"UNTERMINATED_QUOTED_IDENTIFIER":      136,
	"INVALID_BYTE_SEQUENCE":               137,
	"COULD_NOT_SERIALIZE_REPEATABLE_READ": 138,
	"COULD_NOT_SERIALIZE_SERIALIZABLE":    139,
	"PGA_COLLECTOR_IDENTIFY":              1000,
}

func (x LogLineInformation_LogClassification) String() string {
	return proto.EnumName(LogLineInformation_LogClassification_name, int32(x))
}
func (LogLineInformation_LogClassification) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_compact_log_snapshot_e4711e0aef4ee307, []int{2, 1}
}

type QuerySample_ExplainFormat int32

const (
	QuerySample_TEXT_EXPLAIN_FORMAT QuerySample_ExplainFormat = 0
	QuerySample_JSON_EXPLAIN_FORMAT QuerySample_ExplainFormat = 1
)

var QuerySample_ExplainFormat_name = map[int32]string{
	0: "TEXT_EXPLAIN_FORMAT",
	1: "JSON_EXPLAIN_FORMAT",
}
var QuerySample_ExplainFormat_value = map[string]int32{
	"TEXT_EXPLAIN_FORMAT": 0,
	"JSON_EXPLAIN_FORMAT": 1,
}

func (x QuerySample_ExplainFormat) String() string {
	return proto.EnumName(QuerySample_ExplainFormat_name, int32(x))
}
func (QuerySample_ExplainFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_compact_log_snapshot_e4711e0aef4ee307, []int{3, 0}
}

type QuerySample_ExplainSource int32

const (
	QuerySample_STATEMENT_LOG_EXPLAIN_SOURCE QuerySample_ExplainSource = 0
	QuerySample_AUTO_EXPLAIN_EXPLAIN_SOURCE  QuerySample_ExplainSource = 1
	QuerySample_EXTERNAL_EXPLAIN_SOURCE      QuerySample_ExplainSource = 2
	QuerySample_GENERIC_EXPLAIN_SOURCE       QuerySample_ExplainSource = 3
)

var QuerySample_ExplainSource_name = map[int32]string{
	0: "STATEMENT_LOG_EXPLAIN_SOURCE",
	1: "AUTO_EXPLAIN_EXPLAIN_SOURCE",
	2: "EXTERNAL_EXPLAIN_SOURCE",
	3: "GENERIC_EXPLAIN_SOURCE",
}
var QuerySample_ExplainSource_value = map[string]int32{
	"STATEMENT_LOG_EXPLAIN_SOURCE": 0,
	"AUTO_EXPLAIN_EXPLAIN_SOURCE":  1,
	"EXTERNAL_EXPLAIN_SOURCE":      2,
	"GENERIC_EXPLAIN_SOURCE":       3,
}

func (x QuerySample_ExplainSource) String() string {
	return proto.EnumName(QuerySample_ExplainSource_name, int32(x))
}
func (QuerySample_ExplainSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_compact_log_snapshot_e4711e0aef4ee307, []int{3, 1}
}

type CompactLogSnapshot struct {
	LogFileReferences    []*LogFileReference   `protobuf:"bytes,1,rep,name=log_file_references,json=logFileReferences,proto3" json:"log_file_references,omitempty"`
	LogLineInformations  []*LogLineInformation `protobuf:"bytes,2,rep,name=log_line_informations,json=logLineInformations,proto3" json:"log_line_informations,omitempty"`
	QuerySamples         []*QuerySample        `protobuf:"bytes,3,rep,name=query_samples,json=querySamples,proto3" json:"query_samples,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CompactLogSnapshot) Reset()         { *m = CompactLogSnapshot{} }
func (m *CompactLogSnapshot) String() string { return proto.CompactTextString(m) }
func (*CompactLogSnapshot) ProtoMessage()    {}
func (*CompactLogSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_compact_log_snapshot_e4711e0aef4ee307, []int{0}
}
func (m *CompactLogSnapshot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompactLogSnapshot.Unmarshal(m, b)
}
func (m *CompactLogSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompactLogSnapshot.Marshal(b, m, deterministic)
}
func (dst *CompactLogSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompactLogSnapshot.Merge(dst, src)
}
func (m *CompactLogSnapshot) XXX_Size() int {
	return xxx_messageInfo_CompactLogSnapshot.Size(m)
}
func (m *CompactLogSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_CompactLogSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_CompactLogSnapshot proto.InternalMessageInfo

func (m *CompactLogSnapshot) GetLogFileReferences() []*LogFileReference {
	if m != nil {
		return m.LogFileReferences
	}
	return nil
}

func (m *CompactLogSnapshot) GetLogLineInformations() []*LogLineInformation {
	if m != nil {
		return m.LogLineInformations
	}
	return nil
}

func (m *CompactLogSnapshot) GetQuerySamples() []*QuerySample {
	if m != nil {
		return m.QuerySamples
	}
	return nil
}

type LogFileReference struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	S3Location           string   `protobuf:"bytes,2,opt,name=s3_location,json=s3Location,proto3" json:"s3_location,omitempty"`
	S3CekAlgo            string   `protobuf:"bytes,3,opt,name=s3_cek_algo,json=s3CekAlgo,proto3" json:"s3_cek_algo,omitempty"`
	S3CmkKeyId           string   `protobuf:"bytes,4,opt,name=s3_cmk_key_id,json=s3CmkKeyId,proto3" json:"s3_cmk_key_id,omitempty"`
	ByteSize             int64    `protobuf:"varint,5,opt,name=byte_size,json=byteSize,proto3" json:"byte_size,omitempty"`
	OriginalName         string   `protobuf:"bytes,6,opt,name=original_name,json=originalName,proto3" json:"original_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogFileReference) Reset()         { *m = LogFileReference{} }
func (m *LogFileReference) String() string { return proto.CompactTextString(m) }
func (*LogFileReference) ProtoMessage()    {}
func (*LogFileReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_compact_log_snapshot_e4711e0aef4ee307, []int{1}
}
func (m *LogFileReference) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogFileReference.Unmarshal(m, b)
}
func (m *LogFileReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogFileReference.Marshal(b, m, deterministic)
}
func (dst *LogFileReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogFileReference.Merge(dst, src)
}
func (m *LogFileReference) XXX_Size() int {
	return xxx_messageInfo_LogFileReference.Size(m)
}
func (m *LogFileReference) XXX_DiscardUnknown() {
	xxx_messageInfo_LogFileReference.DiscardUnknown(m)
}

var xxx_messageInfo_LogFileReference proto.InternalMessageInfo

func (m *LogFileReference) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *LogFileReference) GetS3Location() string {
	if m != nil {
		return m.S3Location
	}
	return ""
}

func (m *LogFileReference) GetS3CekAlgo() string {
	if m != nil {
		return m.S3CekAlgo
	}
	return ""
}

func (m *LogFileReference) GetS3CmkKeyId() string {
	if m != nil {
		return m.S3CmkKeyId
	}
	return ""
}

func (m *LogFileReference) GetByteSize() int64 {
	if m != nil {
		return m.ByteSize
	}
	return 0
}

func (m *LogFileReference) GetOriginalName() string {
	if m != nil {
		return m.OriginalName
	}
	return ""
}

type LogLineInformation struct {
	LogFileIdx           int32                                `protobuf:"varint,1,opt,name=log_file_idx,json=logFileIdx,proto3" json:"log_file_idx,omitempty"`
	Uuid                 string                               `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ParentUuid           string                               `protobuf:"bytes,3,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty"`
	ByteStart            int64                                `protobuf:"varint,4,opt,name=byte_start,json=byteStart,proto3" json:"byte_start,omitempty"`
	ByteContentStart     int64                                `protobuf:"varint,5,opt,name=byte_content_start,json=byteContentStart,proto3" json:"byte_content_start,omitempty"`
	ByteEnd              int64                                `protobuf:"varint,6,opt,name=byte_end,json=byteEnd,proto3" json:"byte_end,omitempty"`
	HasRoleIdx           bool                                 `protobuf:"varint,7,opt,name=has_role_idx,json=hasRoleIdx,proto3" json:"has_role_idx,omitempty"`
	RoleIdx              int32                                `protobuf:"varint,8,opt,name=role_idx,json=roleIdx,proto3" json:"role_idx,omitempty"`
	HasDatabaseIdx       bool                                 `protobuf:"varint,9,opt,name=has_database_idx,json=hasDatabaseIdx,proto3" json:"has_database_idx,omitempty"`
	DatabaseIdx          int32                                `protobuf:"varint,10,opt,name=database_idx,json=databaseIdx,proto3" json:"database_idx,omitempty"`
	HasQueryIdx          bool                                 `protobuf:"varint,11,opt,name=has_query_idx,json=hasQueryIdx,proto3" json:"has_query_idx,omitempty"`
	QueryIdx             int32                                `protobuf:"varint,12,opt,name=query_idx,json=queryIdx,proto3" json:"query_idx,omitempty"`
	OccurredAt           *timestamp.Timestamp                 `protobuf:"bytes,13,opt,name=occurred_at,json=occurredAt,proto3" json:"occurred_at,omitempty"`
	BackendPid           int32                                `protobuf:"varint,14,opt,name=backend_pid,json=backendPid,proto3" json:"backend_pid,omitempty"`
	Level                LogLineInformation_LogLevel          `protobuf:"varint,15,opt,name=level,proto3,enum=pganalyze.collector.LogLineInformation_LogLevel" json:"level,omitempty"`
	Classification       LogLineInformation_LogClassification `protobuf:"varint,16,opt,name=classification,proto3,enum=pganalyze.collector.LogLineInformation_LogClassification" json:"classification,omitempty"`
	DetailsJson          string                               `protobuf:"bytes,17,opt,name=details_json,json=detailsJson,proto3" json:"details_json,omitempty"`
	HasRelationIdx       bool                                 `protobuf:"varint,18,opt,name=has_relation_idx,json=hasRelationIdx,proto3" json:"has_relation_idx,omitempty"`
	RelationIdx          int32                                `protobuf:"varint,19,opt,name=relation_idx,json=relationIdx,proto3" json:"relation_idx,omitempty"`
	RelatedPids          []int32                              `protobuf:"varint,20,rep,packed,name=related_pids,json=relatedPids,proto3" json:"related_pids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *LogLineInformation) Reset()         { *m = LogLineInformation{} }
func (m *LogLineInformation) String() string { return proto.CompactTextString(m) }
func (*LogLineInformation) ProtoMessage()    {}
func (*LogLineInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor_compact_log_snapshot_e4711e0aef4ee307, []int{2}
}
func (m *LogLineInformation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogLineInformation.Unmarshal(m, b)
}
func (m *LogLineInformation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogLineInformation.Marshal(b, m, deterministic)
}
func (dst *LogLineInformation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogLineInformation.Merge(dst, src)
}
func (m *LogLineInformation) XXX_Size() int {
	return xxx_messageInfo_LogLineInformation.Size(m)
}
func (m *LogLineInformation) XXX_DiscardUnknown() {
	xxx_messageInfo_LogLineInformation.DiscardUnknown(m)
}

var xxx_messageInfo_LogLineInformation proto.InternalMessageInfo

func (m *LogLineInformation) GetLogFileIdx() int32 {
	if m != nil {
		return m.LogFileIdx
	}
	return 0
}

func (m *LogLineInformation) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *LogLineInformation) GetParentUuid() string {
	if m != nil {
		return m.ParentUuid
	}
	return ""
}

func (m *LogLineInformation) GetByteStart() int64 {
	if m != nil {
		return m.ByteStart
	}
	return 0
}

func (m *LogLineInformation) GetByteContentStart() int64 {
	if m != nil {
		return m.ByteContentStart
	}
	return 0
}

func (m *LogLineInformation) GetByteEnd() int64 {
	if m != nil {
		return m.ByteEnd
	}
	return 0
}

func (m *LogLineInformation) GetHasRoleIdx() bool {
	if m != nil {
		return m.HasRoleIdx
	}
	return false
}

func (m *LogLineInformation) GetRoleIdx() int32 {
	if m != nil {
		return m.RoleIdx
	}
	return 0
}

func (m *LogLineInformation) GetHasDatabaseIdx() bool {
	if m != nil {
		return m.HasDatabaseIdx
	}
	return false
}

func (m *LogLineInformation) GetDatabaseIdx() int32 {
	if m != nil {
		return m.DatabaseIdx
	}
	return 0
}

func (m *LogLineInformation) GetHasQueryIdx() bool {
	if m != nil {
		return m.HasQueryIdx
	}
	return false
}

func (m *LogLineInformation) GetQueryIdx() int32 {
	if m != nil {
		return m.QueryIdx
	}
	return 0
}

func (m *LogLineInformation) GetOccurredAt() *timestamp.Timestamp {
	if m != nil {
		return m.OccurredAt
	}
	return nil
}

func (m *LogLineInformation) GetBackendPid() int32 {
	if m != nil {
		return m.BackendPid
	}
	return 0
}

func (m *LogLineInformation) GetLevel() LogLineInformation_LogLevel {
	if m != nil {
		return m.Level
	}
	return LogLineInformation_UNKNOWN
}

func (m *LogLineInformation) GetClassification() LogLineInformation_LogClassification {
	if m != nil {
		return m.Classification
	}
	return LogLineInformation_UNKNOWN_LOG_CLASSIFICATION
}

func (m *LogLineInformation) GetDetailsJson() string {
	if m != nil {
		return m.DetailsJson
	}
	return ""
}

func (m *LogLineInformation) GetHasRelationIdx() bool {
	if m != nil {
		return m.HasRelationIdx
	}
	return false
}

func (m *LogLineInformation) GetRelationIdx() int32 {
	if m != nil {
		return m.RelationIdx
	}
	return 0
}

func (m *LogLineInformation) GetRelatedPids() []int32 {
	if m != nil {
		return m.RelatedPids
	}
	return nil
}

type QuerySample struct {
	QueryIdx    int32                `protobuf:"varint,1,opt,name=query_idx,json=queryIdx,proto3" json:"query_idx,omitempty"`
	OccurredAt  *timestamp.Timestamp `protobuf:"bytes,2,opt,name=occurred_at,json=occurredAt,proto3" json:"occurred_at,omitempty"`
	RuntimeMs   float64              `protobuf:"fixed64,3,opt,name=runtime_ms,json=runtimeMs,proto3" json:"runtime_ms,omitempty"`
	QueryText   string               `protobuf:"bytes,4,opt,name=query_text,json=queryText,proto3" json:"query_text,omitempty"`
	Parameters  []string             `protobuf:"bytes,5,rep,name=parameters,proto3" json:"parameters,omitempty"`
	LogLineUuid string               `protobuf:"bytes,10,opt,name=log_line_uuid,json=logLineUuid,proto3" json:"log_line_uuid,omitempty"`
	// Note: For historic reasons this contains an inline version of QueryExplainInformation
	HasExplain           bool                      `protobuf:"varint,20,opt,name=has_explain,json=hasExplain,proto3" json:"has_explain,omitempty"`
	ExplainOutput        string                    `protobuf:"bytes,21,opt,name=explain_output,json=explainOutput,proto3" json:"explain_output,omitempty"`
	ExplainError         string                    `protobuf:"bytes,22,opt,name=explain_error,json=explainError,proto3" json:"explain_error,omitempty"`
	ExplainFormat        QuerySample_ExplainFormat `protobuf:"varint,23,opt,name=explain_format,json=explainFormat,proto3,enum=pganalyze.collector.QuerySample_ExplainFormat" json:"explain_format,omitempty"`
	ExplainSource        QuerySample_ExplainSource `protobuf:"varint,24,opt,name=explain_source,json=explainSource,proto3,enum=pganalyze.collector.QuerySample_ExplainSource" json:"explain_source,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *QuerySample) Reset()         { *m = QuerySample{} }
func (m *QuerySample) String() string { return proto.CompactTextString(m) }
func (*QuerySample) ProtoMessage()    {}
func (*QuerySample) Descriptor() ([]byte, []int) {
	return fileDescriptor_compact_log_snapshot_e4711e0aef4ee307, []int{3}
}
func (m *QuerySample) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuerySample.Unmarshal(m, b)
}
func (m *QuerySample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuerySample.Marshal(b, m, deterministic)
}
func (dst *QuerySample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySample.Merge(dst, src)
}
func (m *QuerySample) XXX_Size() int {
	return xxx_messageInfo_QuerySample.Size(m)
}
func (m *QuerySample) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySample.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySample proto.InternalMessageInfo

func (m *QuerySample) GetQueryIdx() int32 {
	if m != nil {
		return m.QueryIdx
	}
	return 0
}

func (m *QuerySample) GetOccurredAt() *timestamp.Timestamp {
	if m != nil {
		return m.OccurredAt
	}
	return nil
}

func (m *QuerySample) GetRuntimeMs() float64 {
	if m != nil {
		return m.RuntimeMs
	}
	return 0
}

func (m *QuerySample) GetQueryText() string {
	if m != nil {
		return m.QueryText
	}
	return ""
}

func (m *QuerySample) GetParameters() []string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *QuerySample) GetLogLineUuid() string {
	if m != nil {
		return m.LogLineUuid
	}
	return ""
}

func (m *QuerySample) GetHasExplain() bool {
	if m != nil {
		return m.HasExplain
	}
	return false
}

func (m *QuerySample) GetExplainOutput() string {
	if m != nil {
		return m.ExplainOutput
	}
	return ""
}

func (m *QuerySample) GetExplainError() string {
	if m != nil {
		return m.ExplainError
	}
	return ""
}

func (m *QuerySample) GetExplainFormat() QuerySample_ExplainFormat {
	if m != nil {
		return m.ExplainFormat
	}
	return QuerySample_TEXT_EXPLAIN_FORMAT
}

func (m *QuerySample) GetExplainSource() QuerySample_ExplainSource {
	if m != nil {
		return m.ExplainSource
	}
	return QuerySample_STATEMENT_LOG_EXPLAIN_SOURCE
}

func init() {
	proto.RegisterType((*CompactLogSnapshot)(nil), "pganalyze.collector.CompactLogSnapshot")
	proto.RegisterType((*LogFileReference)(nil), "pganalyze.collector.LogFileReference")
	proto.RegisterType((*LogLineInformation)(nil), "pganalyze.collector.LogLineInformation")
	proto.RegisterType((*QuerySample)(nil), "pganalyze.collector.QuerySample")
	proto.RegisterEnum("pganalyze.collector.LogLineInformation_LogLevel", LogLineInformation_LogLevel_name, LogLineInformation_LogLevel_value)
	proto.RegisterEnum("pganalyze.collector.LogLineInformation_LogClassification", LogLineInformation_LogClassification_name, LogLineInformation_LogClassification_value)
	proto.RegisterEnum("pganalyze.collector.QuerySample_ExplainFormat", QuerySample_ExplainFormat_name, QuerySample_ExplainFormat_value)
	proto.RegisterEnum("pganalyze.collector.QuerySample_ExplainSource", QuerySample_ExplainSource_name, QuerySample_ExplainSource_value)
}

func init() {
	proto.RegisterFile("compact_log_snapshot.proto", fileDescriptor_compact_log_snapshot_e4711e0aef4ee307)
}

var fileDescriptor_compact_log_snapshot_e4711e0aef4ee307 = []byte{
	// 2437 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x58, 0xd9, 0x7a, 0xdb, 0xb8,
	0xf5, 0x1f, 0xd9, 0x71, 0x6c, 0xc3, 0xcb, 0x20, 0x48, 0x1c, 0x2b, 0xce, 0xa6, 0x38, 0xff, 0xfc,
	0xc7, 0x6d, 0xa7, 0x9e, 0x7e, 0x49, 0x6f, 0xfa, 0x75, 0x85, 0xc9, 0x23, 0x19, 0x09, 0x05, 0xd0,
	0x20, 0xe8, 0x25, 0xd3, 0x16, 0x65, 0x2c, 0xc6, 0x51, 0x23, 0x8b, 0x8e, 0x28, 0x4f, 0x93, 0x74,
	0xdf, 0x97, 0xb9, 0xe8, 0x8b, 0xf4, 0x1d, 0xfa, 0x02, 0xbd, 0xeb, 0xd7, 0x77, 0xe8, 0x63, 0xf4,
	0x3b, 0x20, 0x29, 0xcb, 0x8a, 0xbb, 0xe4, 0x4e, 0x3c, 0xe7, 0x87, 0x1f, 0xce, 0x0e, 0x40, 0x64,
	0xed, 0x30, 0x3b, 0x3e, 0x49, 0x0e, 0x87, 0xb6, 0x97, 0x1d, 0xd9, 0xbc, 0x9f, 0x9c, 0xe4, 0x2f,
	0xb2, 0xe1, 0xe6, 0xc9, 0x20, 0x1b, 0x66, 0xec, 0xea, 0xc9, 0x51, 0xd2, 0x4f, 0x7a, 0x6f, 0xde,
	0xa6, 0x9b, 0x87, 0x59, 0xaf, 0x97, 0x1e, 0x0e, 0xb3, 0xc1, 0xda, 0xdd, 0xa3, 0x2c, 0x3b, 0xea,
	0xa5, 0x9f, 0x38, 0xc8, 0xb3, 0xd3, 0xe7, 0x9f, 0x0c, 0xbb, 0xc7, 0x69, 0x3e, 0x4c, 0x8e, 0x4f,
	0x8a, 0x55, 0xeb, 0x7f, 0x9e, 0x22, 0xcc, 0x2b, 0x48, 0x83, 0xec, 0x28, 0x2a, 0x29, 0x59, 0x4c,
	0xae, 0xe2, 0x16, 0xcf, 0xbb, 0xbd, 0xd4, 0x0e, 0xd2, 0xe7, 0xe9, 0x20, 0xed, 0x1f, 0xa6, 0x79,
	0xbd, 0xd6, 0x98, 0xde, 0x58, 0x78, 0xf8, 0x60, 0xf3, 0x82, 0xad, 0x36, 0x83, 0xec, 0xa8, 0xd9,
	0xed, 0xa5, 0xba, 0x42, 0xeb, 0x2b, 0xbd, 0x09, 0x49, 0xce, 0x3e, 0x25, 0x2b, 0x48, 0xdb, 0xeb,
	0xf6, 0x53, 0xdb, 0xed, 0x3f, 0xcf, 0x06, 0xc7, 0xc9, 0xb0, 0x9b, 0xf5, 0xf3, 0xfa, 0x94, 0x23,
	0xfe, 0xe8, 0xdf, 0x11, 0x07, 0xdd, 0x7e, 0x2a, 0xce, 0xf0, 0x1a, 0x8d, 0x9b, 0x90, 0xe5, 0x0c,
	0xc8, 0xd2, 0xab, 0xd3, 0x74, 0xf0, 0xc6, 0xe6, 0xc9, 0xf1, 0x49, 0x2f, 0xcd, 0xeb, 0xd3, 0x8e,
	0xb4, 0x71, 0x21, 0xe9, 0x0e, 0x22, 0x23, 0x07, 0xd4, 0x8b, 0xaf, 0xce, 0x3e, 0xf2, 0xf5, 0xbf,
	0xd5, 0x08, 0x9d, 0xf4, 0x85, 0x31, 0x72, 0xe9, 0xf4, 0xb4, 0xdb, 0xa9, 0xd7, 0x1a, 0xb5, 0x8d,
	0x79, 0xed, 0x7e, 0xb3, 0xbb, 0x64, 0x21, 0x7f, 0x64, 0x7b, 0xd9, 0xa1, 0xdb, 0xbf, 0x3e, 0xe5,
	0x54, 0x24, 0x7f, 0x14, 0x94, 0x12, 0x76, 0xc7, 0x01, 0x0e, 0xd3, 0x97, 0x36, 0xe9, 0x1d, 0x65,
	0xf5, 0x69, 0x07, 0x98, 0xcf, 0x1f, 0x79, 0xe9, 0x4b, 0xde, 0x3b, 0xca, 0xd8, 0x3d, 0xb2, 0x84,
	0xfa, 0xe3, 0x97, 0xf6, 0x65, 0xfa, 0xc6, 0x76, 0x3b, 0xf5, 0x4b, 0x15, 0x85, 0x77, 0xfc, 0xf2,
	0x49, 0xfa, 0x46, 0x74, 0xd8, 0x4d, 0x32, 0xff, 0xec, 0xcd, 0x30, 0xb5, 0x79, 0xf7, 0x6d, 0x5a,
	0x9f, 0x69, 0xd4, 0x36, 0xa6, 0xf5, 0x1c, 0x0a, 0xa2, 0xee, 0xdb, 0x94, 0xdd, 0x27, 0x4b, 0xd9,
	0xa0, 0x7b, 0xd4, 0xed, 0x27, 0x3d, 0xdb, 0x4f, 0x8e, 0xd3, 0xfa, 0x65, 0xb7, 0x7e, 0xb1, 0x12,
	0xca, 0xe4, 0x38, 0x5d, 0xff, 0xeb, 0x6d, 0xc2, 0xde, 0x8d, 0x20, 0x6b, 0x90, 0xc5, 0x51, 0x82,
	0xbb, 0x9d, 0xd7, 0xce, 0xb1, 0x19, 0x4d, 0xca, 0x94, 0x89, 0xce, 0xeb, 0x91, 0xcb, 0x53, 0xe7,
	0x5d, 0x3e, 0x49, 0x06, 0x69, 0x7f, 0x68, 0x9d, 0xaa, 0xf0, 0x88, 0x14, 0xa2, 0x18, 0x01, 0xb7,
	0x09, 0x29, 0xec, 0x1d, 0x26, 0x83, 0xa1, 0xf3, 0x67, 0x5a, 0x3b, 0x0f, 0x22, 0x14, 0xb0, 0x8f,
	0x09, 0x73, 0xea, 0xc3, 0xac, 0x3f, 0x44, 0x96, 0x02, 0x56, 0xf8, 0x45, 0x51, 0xe3, 0x15, 0x8a,
	0x02, 0x7d, 0x83, 0x38, 0x5f, 0x6d, 0xda, 0xef, 0x38, 0xd7, 0xa6, 0xf5, 0x2c, 0x7e, 0x43, 0xbf,
	0x83, 0xe6, 0xbf, 0x48, 0x72, 0x3b, 0xc8, 0x4a, 0xf3, 0x67, 0x1b, 0xb5, 0x8d, 0x39, 0x4d, 0x5e,
	0x24, 0xb9, 0xce, 0x0a, 0xf3, 0x6f, 0x90, 0xb9, 0x91, 0x76, 0xce, 0x39, 0x37, 0x3b, 0x28, 0x55,
	0x1b, 0x84, 0xe2, 0xe2, 0x4e, 0x32, 0x4c, 0x9e, 0x25, 0x79, 0x01, 0x99, 0x77, 0x04, 0xcb, 0x2f,
	0x92, 0xdc, 0x2f, 0xc5, 0x88, 0xbc, 0x47, 0x16, 0xcf, 0xa1, 0x88, 0x23, 0x5a, 0xe8, 0x8c, 0x41,
	0xd6, 0xc9, 0x12, 0x92, 0x15, 0x95, 0x87, 0x98, 0x05, 0xc7, 0xb4, 0xf0, 0x22, 0xc9, 0x5d, 0x8d,
	0x21, 0xe6, 0x26, 0x99, 0x3f, 0xd3, 0x2f, 0x3a, 0x8e, 0xb9, 0x57, 0x95, 0xf2, 0xeb, 0x64, 0x21,
	0x3b, 0x3c, 0x3c, 0x1d, 0x0c, 0xd2, 0x8e, 0x4d, 0x86, 0xf5, 0xa5, 0x46, 0x6d, 0x63, 0xe1, 0xe1,
	0xda, 0x66, 0xd1, 0xb8, 0x9b, 0x55, 0xe3, 0x6e, 0x9a, 0xaa, 0x71, 0x35, 0xa9, 0xe0, 0x7c, 0x88,
	0x09, 0x79, 0x96, 0x1c, 0xbe, 0x4c, 0xfb, 0x1d, 0x7b, 0xd2, 0xed, 0xd4, 0x97, 0x8b, 0x2c, 0x96,
	0xa2, 0xb0, 0xdb, 0x61, 0x4d, 0x32, 0xd3, 0x4b, 0x3f, 0x4b, 0x7b, 0xf5, 0x0f, 0x1b, 0xb5, 0x8d,
	0xe5, 0x87, 0x5f, 0xf9, 0x1f, 0x3b, 0xcc, 0x89, 0x70, 0x9d, 0x2e, 0x96, 0xb3, 0x84, 0x2c, 0x1f,
	0xf6, 0x92, 0x3c, 0xef, 0x3e, 0xef, 0x96, 0xf5, 0x4e, 0x1d, 0xe1, 0xd7, 0xde, 0x83, 0xd0, 0x3b,
	0x47, 0xa0, 0x27, 0x08, 0x5d, 0xb0, 0xd3, 0x61, 0xd2, 0xed, 0xe5, 0xf6, 0x87, 0x79, 0xd6, 0xaf,
	0x5f, 0x71, 0xd5, 0xb5, 0x50, 0xca, 0x1e, 0xe7, 0x59, 0xbf, 0xca, 0xdc, 0x20, 0xed, 0xb9, 0x25,
	0x2e, 0x9e, 0x6c, 0x94, 0x39, 0x5d, 0x8a, 0xcb, 0xcc, 0x9d, 0x43, 0x5d, 0x2d, 0x32, 0x37, 0xb8,
	0x00, 0x92, 0xba, 0xd8, 0xe5, 0xf5, 0x6b, 0x8d, 0xe9, 0x11, 0x24, 0xc5, 0xe0, 0xe5, 0xeb, 0x7f,
	0xa9, 0x91, 0xb9, 0x2a, 0x12, 0x6c, 0x81, 0xcc, 0xc6, 0xf2, 0x89, 0x54, 0x7b, 0x92, 0x7e, 0xc0,
	0xe6, 0xc9, 0x8c, 0x0f, 0x5b, 0x71, 0x8b, 0xd6, 0xd8, 0x1c, 0xb9, 0x24, 0x64, 0x53, 0xd1, 0x29,
	0x46, 0xc8, 0x65, 0xa9, 0x8c, 0xf0, 0x80, 0x4e, 0x23, 0x7a, 0x8f, 0x6b, 0x29, 0x64, 0x8b, 0x5e,
	0x42, 0x34, 0x68, 0xad, 0x34, 0x9d, 0x61, 0xb3, 0x64, 0x3a, 0x50, 0x2d, 0x7a, 0x19, 0x65, 0x4d,
	0x6e, 0x78, 0x40, 0x67, 0xf1, 0x67, 0xc8, 0xa5, 0xf0, 0xe8, 0x1c, 0x52, 0xf8, 0x60, 0xb8, 0x08,
	0xe8, 0x3c, 0x12, 0x6f, 0x0b, 0x69, 0x28, 0x41, 0x32, 0x4f, 0x49, 0x03, 0xfb, 0x86, 0x2e, 0xb0,
	0x25, 0x32, 0x1f, 0x19, 0x6e, 0xa0, 0x0d, 0xd2, 0xd0, 0x45, 0x5c, 0xbc, 0x13, 0x83, 0x3e, 0xa0,
	0x4b, 0xeb, 0x7f, 0x5f, 0x21, 0x57, 0xde, 0x89, 0x33, 0xbb, 0x43, 0xd6, 0x4a, 0xbb, 0x6d, 0xa0,
	0x5a, 0xd6, 0x0b, 0x78, 0x14, 0x89, 0xa6, 0xf0, 0xb8, 0x11, 0x0a, 0x5d, 0x61, 0x64, 0x39, 0x02,
	0xbd, 0x0b, 0xda, 0x7a, 0x9a, 0x47, 0xdb, 0xe0, 0xd3, 0x1a, 0xa3, 0x64, 0xb1, 0x94, 0x45, 0x86,
	0x6b, 0x43, 0xa7, 0xd8, 0x4d, 0xb2, 0x3a, 0x2e, 0xb1, 0x1a, 0x3c, 0xb5, 0x0b, 0x1a, 0xfd, 0x9b,
	0x66, 0x57, 0xc9, 0x87, 0x95, 0x72, 0x3b, 0x36, 0x3e, 0x86, 0xe8, 0x12, 0xab, 0x93, 0x6b, 0xa5,
	0x50, 0xc5, 0xc6, 0xaa, 0xa6, 0x6d, 0x43, 0x5b, 0xe9, 0x03, 0x3a, 0x33, 0xc6, 0x25, 0xe4, 0x2e,
	0x0f, 0x84, 0x6f, 0xbd, 0x6d, 0xf0, 0x9e, 0x44, 0x71, 0x9b, 0x5e, 0x66, 0xb7, 0x48, 0xbd, 0x54,
	0x1a, 0x68, 0x87, 0xb6, 0x29, 0x02, 0xb0, 0x9e, 0x06, 0x6e, 0xc0, 0xa7, 0xb3, 0xec, 0x43, 0xb2,
	0x50, 0x6a, 0xdb, 0x22, 0xc2, 0x80, 0x5d, 0x21, 0x4b, 0xa5, 0x40, 0x43, 0xa0, 0xb8, 0x4f, 0xe7,
	0xd9, 0x0d, 0xb2, 0x52, 0x8a, 0x42, 0xad, 0x3c, 0x88, 0x22, 0x0b, 0xfb, 0x02, 0x97, 0x13, 0xb6,
	0x4a, 0xae, 0x7a, 0x4a, 0x4a, 0xf0, 0xd0, 0x77, 0xf4, 0x01, 0xc4, 0x2e, 0xf8, 0xf4, 0x1a, 0xae,
	0x19, 0x53, 0xf0, 0xd8, 0x6c, 0x2b, 0x2d, 0x9e, 0x82, 0x4f, 0x57, 0xde, 0x59, 0xf3, 0x18, 0x3c,
	0x24, 0xbb, 0x8e, 0x6e, 0x8c, 0x29, 0x7c, 0x11, 0x95, 0x5f, 0xe0, 0xd3, 0x55, 0xf6, 0x11, 0xb9,
	0x3f, 0xa6, 0xf4, 0x02, 0x01, 0xd2, 0xd8, 0x26, 0x17, 0x01, 0xf8, 0xd6, 0x28, 0x5b, 0xea, 0x68,
	0x1d, 0x63, 0x37, 0x06, 0x0c, 0x54, 0x64, 0xe8, 0x8d, 0x09, 0x6a, 0x14, 0x5a, 0x15, 0x82, 0xb4,
	0x66, 0x9f, 0xae, 0x4d, 0xd8, 0x6a, 0x40, 0xb7, 0x85, 0x74, 0xe1, 0xb9, 0xc9, 0xae, 0x13, 0x56,
	0x06, 0xfb, 0x0c, 0x11, 0xd1, 0x5b, 0xec, 0x36, 0xb9, 0x61, 0x94, 0xb2, 0x6d, 0x2e, 0x0f, 0xc6,
	0x35, 0x56, 0xab, 0x00, 0xe8, 0x6d, 0x76, 0x9f, 0xdc, 0xf5, 0x54, 0x1c, 0xf8, 0x56, 0x2a, 0x63,
	0xb9, 0xe7, 0x41, 0x68, 0x6c, 0x14, 0x05, 0x63, 0x50, 0x7a, 0x87, 0xfd, 0x3f, 0x59, 0x0f, 0xb5,
	0x32, 0xca, 0x53, 0x81, 0x75, 0xd5, 0x6c, 0x63, 0x19, 0xc5, 0x61, 0xa8, 0xb4, 0x01, 0xdf, 0xee,
	0x82, 0x8e, 0x10, 0x77, 0x97, 0x3d, 0x20, 0xf7, 0x26, 0x70, 0x42, 0x7a, 0xaa, 0x1d, 0x06, 0x60,
	0xc0, 0xb6, 0x21, 0x8a, 0x78, 0x0b, 0x68, 0x83, 0xdd, 0x23, 0xb7, 0x2f, 0x34, 0xc9, 0xe7, 0x86,
	0x6f, 0xf1, 0x08, 0xe8, 0x3d, 0x17, 0x79, 0x2c, 0x8c, 0x50, 0x09, 0x69, 0x8a, 0xba, 0xc3, 0x7a,
	0xdb, 0x98, 0x50, 0x54, 0xe4, 0xf4, 0x0b, 0x2e, 0x6e, 0x67, 0x0a, 0xe4, 0x6f, 0x6a, 0xd8, 0x89,
	0xb1, 0x53, 0xbe, 0x88, 0x71, 0xd3, 0xe0, 0x58, 0x26, 0x08, 0xbf, 0xf4, 0x8e, 0x6a, 0x44, 0xf9,
	0x31, 0xe6, 0xe7, 0x9c, 0x8a, 0x1b, 0xfa, 0x65, 0x8c, 0xe7, 0x1e, 0x0f, 0x46, 0xe5, 0x8b, 0xcd,
	0xa0, 0x7d, 0x1b, 0x80, 0x6c, 0x99, 0x6d, 0xfa, 0x90, 0x2d, 0x92, 0x39, 0x54, 0x6b, 0xf0, 0x15,
	0x7d, 0x84, 0x0d, 0x88, 0x5f, 0x5c, 0x7b, 0xdb, 0x62, 0x17, 0x90, 0xbb, 0xcd, 0xa5, 0x5f, 0x16,
	0x03, 0xfd, 0x2a, 0x5b, 0x21, 0x57, 0x78, 0x6c, 0xd4, 0x2e, 0xf7, 0xe2, 0xb8, 0x6d, 0x3d, 0x2e,
	0x3d, 0x08, 0xe8, 0x37, 0xd0, 0x17, 0xb3, 0x2f, 0x7c, 0xbb, 0xa7, 0x79, 0xc8, 0xb5, 0x8a, 0xa5,
	0x6f, 0xab, 0x89, 0xf2, 0x4d, 0x34, 0x78, 0x52, 0x59, 0x4c, 0x98, 0x6f, 0xb1, 0xbb, 0xe4, 0xe6,
	0x18, 0x5d, 0xc0, 0x63, 0xe9, 0x6d, 0x57, 0x6d, 0x0b, 0x3e, 0xfd, 0x36, 0x26, 0xe8, 0x42, 0xc0,
	0x76, 0x6c, 0x30, 0x1c, 0xd6, 0xf5, 0xef, 0x77, 0xb0, 0x7f, 0xc7, 0xcd, 0x2a, 0x23, 0xe2, 0x53,
	0x8e, 0x9b, 0xa3, 0x86, 0x4b, 0x1e, 0x1c, 0x3c, 0x85, 0x31, 0xd5, 0x16, 0x16, 0x49, 0xf4, 0x44,
	0x84, 0x21, 0xf2, 0x54, 0x1b, 0x28, 0xef, 0x49, 0x51, 0x58, 0xbb, 0x5c, 0x04, 0x7c, 0x2b, 0x00,
	0xea, 0x61, 0x7b, 0x8c, 0x70, 0x15, 0xcf, 0x05, 0x40, 0x1f, 0xfb, 0xdb, 0xc9, 0xb9, 0xb7, 0x13,
	0x0b, 0x0d, 0x3e, 0x6d, 0xe2, 0x70, 0x72, 0xa2, 0x3d, 0x2e, 0x5c, 0xfa, 0x5a, 0x23, 0x89, 0x11,
	0x6d, 0x50, 0xb1, 0xa1, 0xdb, 0x6c, 0x8d, 0x5c, 0x77, 0x12, 0x1f, 0xb8, 0x5f, 0xfe, 0x30, 0x45,
	0x6b, 0x0a, 0x34, 0xff, 0xbc, 0x8e, 0xef, 0x2a, 0xe1, 0x83, 0x4f, 0x1f, 0x63, 0xff, 0x8c, 0x66,
	0xab, 0xf5, 0x63, 0x5d, 0xcc, 0xc8, 0x10, 0x53, 0x78, 0x26, 0x2f, 0x32, 0x84, 0x7d, 0x5c, 0x6e,
	0xb7, 0xe3, 0x26, 0xda, 0xbb, 0xfa, 0x38, 0x02, 0x4d, 0xb5, 0x1b, 0x51, 0x23, 0x25, 0x0e, 0xff,
	0x08, 0xcd, 0x3b, 0x13, 0x61, 0x2c, 0x2d, 0xec, 0x87, 0x01, 0x17, 0x92, 0x1a, 0x4c, 0x4f, 0x64,
	0xb8, 0xf4, 0xb7, 0x0e, 0x2c, 0x16, 0x9e, 0xd2, 0x80, 0x89, 0x0f, 0x6c, 0x53, 0xab, 0x76, 0x55,
	0x44, 0xf4, 0x29, 0x96, 0x60, 0x05, 0x2b, 0x53, 0x6b, 0x23, 0xa3, 0x81, 0xb7, 0x31, 0x24, 0x9f,
	0x62, 0x7b, 0x9d, 0xa9, 0x4b, 0xb1, 0x15, 0xd2, 0x80, 0xd6, 0x71, 0x88, 0x71, 0xf8, 0xee, 0x79,
	0x06, 0x15, 0x86, 0xe7, 0x18, 0xbe, 0x37, 0x6e, 0x87, 0xa7, 0x64, 0x24, 0x22, 0x83, 0xc6, 0x96,
	0x73, 0xdf, 0x6d, 0x6a, 0x80, 0x7e, 0xbf, 0x0c, 0x4d, 0x65, 0xc7, 0x44, 0x08, 0xa8, 0x75, 0xf3,
	0xbc, 0xd4, 0x57, 0xed, 0x82, 0x71, 0x0b, 0x84, 0x04, 0xfa, 0x03, 0x2c, 0xd6, 0x58, 0x8a, 0x9d,
	0x18, 0xdc, 0x1e, 0x46, 0x73, 0x6c, 0xb1, 0x5d, 0xa1, 0x82, 0x22, 0xf2, 0x1d, 0xf6, 0x7f, 0xa4,
	0xd1, 0x54, 0x1a, 0x44, 0x4b, 0xda, 0x27, 0x70, 0x70, 0x31, 0x2a, 0x45, 0x6f, 0xb1, 0x70, 0x64,
	0x1c, 0x04, 0x17, 0x43, 0x9e, 0xa3, 0x9d, 0x6e, 0x34, 0x5c, 0xac, 0x3f, 0x62, 0xeb, 0xe4, 0x0e,
	0xec, 0x7b, 0x41, 0x1c, 0xb9, 0x79, 0x7d, 0x11, 0xe6, 0x85, 0x3b, 0x16, 0x0f, 0xa4, 0xe1, 0xfb,
	0x65, 0xb3, 0xf5, 0xb1, 0x49, 0x2a, 0xaf, 0x84, 0x0c, 0x63, 0x63, 0x0b, 0x3d, 0xcd, 0xb0, 0x24,
	0x76, 0x79, 0x10, 0x83, 0x9b, 0x42, 0x81, 0x92, 0x2d, 0xdb, 0x54, 0xda, 0x9a, 0x83, 0x10, 0xe8,
	0x09, 0x96, 0x44, 0xb5, 0xcc, 0x81, 0xe8, 0x2b, 0xc4, 0xb7, 0x79, 0xd0, 0x54, 0xba, 0x0d, 0xbe,
	0xe5, 0x5a, 0xf3, 0x03, 0x1b, 0x08, 0x03, 0x9a, 0x07, 0x74, 0xe0, 0xea, 0x25, 0xde, 0x72, 0xe7,
	0x3c, 0x1e, 0x7c, 0x91, 0x6b, 0x9b, 0x40, 0xf0, 0x88, 0xe6, 0xe8, 0xbb, 0x90, 0x11, 0x68, 0x63,
	0x0d, 0xd7, 0x2d, 0xc0, 0xe1, 0x15, 0xc4, 0x6d, 0x89, 0xb8, 0x36, 0x37, 0xde, 0x36, 0x1d, 0xe2,
	0x72, 0x1c, 0xb3, 0x3c, 0xc0, 0x99, 0xe4, 0xfa, 0x28, 0x2a, 0xb6, 0xa0, 0xa7, 0xac, 0x41, 0x6e,
	0x9d, 0x2d, 0x70, 0xc4, 0xae, 0xd0, 0x5a, 0x5a, 0xc5, 0xa1, 0xdd, 0x3a, 0xa0, 0x9f, 0xa1, 0x65,
	0x1a, 0x8a, 0x18, 0x58, 0x5f, 0x41, 0xe4, 0x7a, 0x14, 0xf6, 0x45, 0x64, 0xe8, 0x8f, 0x8a, 0xc3,
	0xc8, 0x2d, 0x9f, 0x50, 0xe1, 0xb5, 0x77, 0x55, 0x85, 0xa0, 0xb9, 0x51, 0x7a, 0x52, 0xf9, 0xc6,
	0xa5, 0xa3, 0x58, 0xa7, 0xa1, 0x09, 0x1a, 0xa4, 0x07, 0x96, 0xb7, 0xb7, 0x44, 0x2b, 0x56, 0x71,
	0x44, 0xdf, 0xe2, 0x50, 0x0c, 0xf1, 0x64, 0x8b, 0x5c, 0x3e, 0x7c, 0x90, 0x02, 0x7c, 0xfa, 0x63,
	0xf4, 0xc4, 0x68, 0x2e, 0x23, 0x5e, 0x1c, 0x7e, 0x22, 0xb2, 0x7c, 0xcb, 0x1d, 0x40, 0xf4, 0x27,
	0x78, 0x8a, 0x15, 0xa9, 0x6b, 0x06, 0xc2, 0x33, 0x56, 0xaa, 0xf1, 0x34, 0x16, 0xa1, 0xf8, 0x29,
	0xa6, 0x79, 0x1c, 0xa4, 0xd5, 0x9e, 0xe5, 0xcd, 0xa6, 0x1b, 0x0d, 0xd6, 0xec, 0xe1, 0xdd, 0xed,
	0x67, 0x63, 0x3e, 0x79, 0x5c, 0xa2, 0xd1, 0x5b, 0x60, 0x3d, 0x1e, 0x19, 0xfa, 0x73, 0xb6, 0x42,
	0xa8, 0x2f, 0x76, 0x85, 0x33, 0x6a, 0xeb, 0xc0, 0x3e, 0x05, 0xad, 0xe8, 0x2f, 0xf0, 0xbe, 0xb4,
	0x50, 0x42, 0x7d, 0xad, 0x42, 0xfa, 0xcb, 0x1a, 0xbb, 0x81, 0x85, 0x61, 0xa0, 0x75, 0x76, 0xfd,
	0xd1, 0x5c, 0xb6, 0x80, 0xfe, 0xaa, 0xc6, 0xae, 0x92, 0xe5, 0xb3, 0x83, 0xa3, 0x05, 0xfb, 0x21,
	0xfd, 0x75, 0x8d, 0x31, 0xb2, 0x14, 0x72, 0xcd, 0xdb, 0x55, 0x16, 0xe8, 0x6f, 0x6a, 0xec, 0x16,
	0x59, 0x6d, 0xc6, 0xd2, 0xbb, 0x28, 0xf0, 0xbf, 0xad, 0xb1, 0xeb, 0xe4, 0x8a, 0x54, 0x36, 0x8a,
	0xbd, 0x6d, 0x1b, 0xf1, 0x5d, 0x70, 0xa7, 0x13, 0xfd, 0x5d, 0x8d, 0xdd, 0xc5, 0xfb, 0xde, 0xd9,
	0xad, 0xc0, 0xee, 0xc4, 0xaa, 0x1c, 0x0e, 0x48, 0xfb, 0xfb, 0x1a, 0xbb, 0x4f, 0xee, 0x5c, 0x04,
	0x10, 0x3e, 0x48, 0x23, 0x9a, 0x02, 0x34, 0xfd, 0x43, 0x8d, 0xad, 0x91, 0x95, 0xca, 0xc8, 0xad,
	0x03, 0x03, 0x36, 0x72, 0xc7, 0xa8, 0x07, 0xf4, 0x8f, 0x35, 0xb6, 0x81, 0x77, 0x9b, 0xea, 0xba,
	0x10, 0x81, 0x16, 0x3c, 0x10, 0x4f, 0xc1, 0x6a, 0x08, 0x01, 0x0f, 0xef, 0x00, 0x7f, 0x72, 0x9f,
	0xfe, 0xa9, 0xc6, 0x1e, 0x90, 0xc6, 0x45, 0xc8, 0xea, 0x97, 0x9b, 0xf1, 0x9f, 0xd7, 0xd8, 0x4d,
	0x72, 0x3d, 0x6c, 0x71, 0x2c, 0xdc, 0x00, 0x3c, 0x2c, 0x97, 0xd2, 0x96, 0x03, 0xfa, 0xcf, 0xd9,
	0xf5, 0x7f, 0xcc, 0x90, 0x85, 0xb1, 0xe7, 0xfa, 0xf9, 0xd7, 0x54, 0xed, 0x3f, 0xbf, 0xa6, 0xa6,
	0xde, 0xeb, 0x35, 0x75, 0x9b, 0x90, 0xc1, 0x69, 0x7f, 0xd8, 0x3d, 0x4e, 0xed, 0x71, 0xee, 0x5e,
	0xb7, 0x35, 0x3d, 0x5f, 0x4a, 0xda, 0x39, 0xaa, 0x8b, 0x8d, 0x87, 0xe9, 0xeb, 0x61, 0xf9, 0x58,
	0x2f, 0x4c, 0x31, 0xe9, 0xeb, 0x21, 0xbb, 0x43, 0xf0, 0x25, 0x9c, 0x1c, 0xa7, 0xc3, 0x74, 0x90,
	0xd7, 0x67, 0x1a, 0xd3, 0xe5, 0xdb, 0xb8, 0x94, 0xe0, 0x4b, 0x71, 0xf4, 0xe7, 0x87, 0x7b, 0x3e,
	0x93, 0xe2, 0x81, 0x53, 0xfe, 0x97, 0x11, 0x97, 0x0f, 0x6c, 0x7c, 0xe0, 0xa4, 0xaf, 0x4f, 0x7a,
	0x49, 0xb7, 0x5f, 0xbf, 0x36, 0x7a, 0xd6, 0x42, 0x21, 0x61, 0x0f, 0xc8, 0x72, 0xa9, 0xb4, 0xd9,
	0xe9, 0xf0, 0xe4, 0x74, 0x58, 0x5f, 0x71, 0x2c, 0x4b, 0xa5, 0x54, 0x39, 0x21, 0xbb, 0x4f, 0x2a,
	0x81, 0x4d, 0x07, 0x83, 0x6c, 0x50, 0xbf, 0x5e, 0xfc, 0x35, 0x50, 0x0a, 0x01, 0x65, 0x2c, 0x3e,
	0xe3, 0x2a, 0xde, 0x69, 0xf5, 0x55, 0xf7, 0xa6, 0xdb, 0xfc, 0x6f, 0xff, 0x98, 0x6c, 0x96, 0xd6,
	0x34, 0xdd, 0xaa, 0xd1, 0xde, 0xc5, 0xe7, 0x38, 0x6d, 0x9e, 0x9d, 0x0e, 0x0e, 0xd3, 0x7a, 0xfd,
	0xfd, 0x68, 0x23, 0xb7, 0x6a, 0x44, 0x5b, 0x7c, 0xae, 0x73, 0xb2, 0x74, 0x6e, 0x5b, 0xbc, 0x04,
	0xe2, 0x8b, 0xa8, 0x3a, 0x39, 0x71, 0xbc, 0xb6, 0xb9, 0xa1, 0x1f, 0xa0, 0xe2, 0x71, 0xa4, 0xe4,
	0xa4, 0xa2, 0xb6, 0xfe, 0x79, 0x6d, 0xc4, 0x51, 0x90, 0xe2, 0xf0, 0x3b, 0x77, 0x34, 0x8f, 0xd6,
	0x44, 0x2a, 0xd6, 0x1e, 0xd0, 0x0f, 0xaa, 0xdb, 0xd4, 0x48, 0x31, 0x01, 0xc0, 0xda, 0x5d, 0x85,
	0x7d, 0x03, 0x5a, 0xf2, 0x60, 0x52, 0x39, 0x85, 0xe3, 0xaa, 0x05, 0x12, 0xb4, 0xf0, 0x26, 0x75,
	0xd3, 0xcf, 0x2e, 0xbb, 0x6a, 0x7c, 0xf4, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf3, 0xfd, 0xc6,
	0x8c, 0xd5, 0x13, 0x00, 0x00,
}
